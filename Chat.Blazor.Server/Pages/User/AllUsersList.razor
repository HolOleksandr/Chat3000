@page "/users"
@using Chat.Blazor.Server.Models;
@using System.Net.Http.Json
@using Chat.Blazor.Server.Models.Paging;
@using Chat.Blazor.Server.Services.Interfaces

@inject IUserService _userService
@inject NavigationManager Navigation


<MudTable
          @ref="_table"
          Items="@Users" 
          ServerData="@(new Func<TableState, Task<TableData<UserDTO>>>(ServerReload))"
          CurrentPage="searchParameters.PageIndex"
        Hover="true" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users list</MudText>
        <MudSpacer />
        <MudTextField T="string"
                      ValueChanged="@(s=>OnSearch(s))"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @*<MudTh>Nr</MudTh>*@
        <MudTh>Avatar</MudTh>
        <MudTh><MudTableSortLabel SortLabel="Id" T="UserDTO">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="FirstName" T="UserDTO">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="LastName" T="UserDTO">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Nickname" T="UserDTO">Nickname</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Email" T="UserDTO">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserDTO">PhoneNumber</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        @*<MudTd DataLabel="Nr">@(rowIndex++)</MudTd>*@
        
        <MudTd DataLabel="Avatar">
            <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="@context.Avatar" />
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Nickname">@context.Nickname</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizes" />
    </PagerContent>
</MudTable>


@code {
    private int rowIndex = 1;
    private List<UserDTO> Users  = new();
    private int[] pageSizes = new int[] {1, 3, 10, 25};
    private MudTable<UserDTO> _table;
    private string searchString = string.Empty;
    private string queryParams = string.Empty;
    private int defaultPageIndex = 0;
    private int defaultPageSize = 10;
    private string defaulstSortColumn = "FirstName";


    private SearchParameters searchParameters = new SearchParameters();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitQueryParams();
        }

    }


    private async Task<TableData<UserDTO>> ServerReload(TableState state)
    {
        searchParameters.PageSize = state.PageSize;
        searchParameters.PageIndex = state.Page;
        searchParameters.SortColumn = state.SortLabel;
        searchParameters.SortOrder = state.SortDirection == SortDirection.Descending ? "desc" : "asc";

        var queryStr = ConvertQueryParams(searchParameters);
        Navigate(queryStr);
        var data = await _userService.GetAllUsersWithSortAsync(queryStr);

        var table = new TableData<UserDTO> { TotalItems = data.TotalCount, Items = data.Data };
        return table;
    }

    private void OnSearch(string text)
    {
        searchParameters.FilterQuery = text;
        _table.ReloadServerData();
    }

    private void Navigate(string query)
    {
        Navigation.NavigateTo(Navigation.BaseUri + "users" + query);
    }



    private void InitQueryParams()
    {
        var uri = new Uri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageIndex", out var index))
        {
            searchParameters.PageIndex = Convert.ToInt32(index.First());
        }
        else
        {
            searchParameters.PageIndex = defaultPageIndex;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var size))
        {
            searchParameters.PageSize = Convert.ToInt32(size.First());
        }
        else
        {
            searchParameters.PageSize = defaultPageSize;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sortColumn", out var sortColumn))
        {
            searchParameters.SortColumn = sortColumn.First();
        }
        else
        {
            searchParameters.SortColumn = defaulstSortColumn;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sortOrder", out var sortOrder))
        {
            searchParameters.SortOrder = sortOrder.First();
        }
        else
        {
            searchParameters.SortOrder = "asc";
        }

        //_table.CurrentPage = searchParameters.PageIndex - 1;




        _table.SortLabel = searchParameters.SortColumn;
        _table.SetRowsPerPage(searchParameters.PageSize);
        //searchParameters.FilterQuery = query["filterQuery"];

    }

    private string ConvertQueryParams(SearchParameters searchParameters)
    {
        var queryStringParam = new Dictionary<string, string?>
        {
            ["PageIndex"] = searchParameters.PageIndex.ToString(),
            ["PageSize"] = searchParameters.PageSize.ToString(),
            ["SortColumn"] = searchParameters.SortColumn,
            ["SortOrder"] = searchParameters.SortOrder,
            ["FilterQuery"] = searchParameters.FilterQuery
        };

        var queryParams = QueryHelpers.AddQueryString("", queryStringParam);
        return queryParams;
    }

}
