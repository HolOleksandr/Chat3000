@page "/users"
@using Chat.Blazor.Server.Helpers.Extensions;
@using Chat.Blazor.Server.Models;
@using System.Net.Http.Json;
@using Chat.Blazor.Server.Models.Paging;
@using Chat.Blazor.Server.Services.Interfaces;

<MudTable
          @ref="_table"
          Items="@Users" 
          ServerData="@(new Func<TableState, Task<TableData<UserDTO>>>(ServerReload))"
          CurrentPage="searchParameters.PageIndex"
          SortLabel="searchParameters.SortColumn"
          Loading=false
          
        Hover="true" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users list</MudText>
        <MudSpacer />
        <MudTextField T="string"
                      Value="@searchParameters.FilterQuery"
                      ValueChanged="@(s=>OnSearch(s))"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @*<MudTh>Nr</MudTh>*@
        <MudTh>Avatar</MudTh>
        <MudTh><MudTableSortLabel SortLabel="Id" T="UserDTO">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="FirstName" T="UserDTO">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="LastName" T="UserDTO">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Nickname" T="UserDTO">Nickname</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Email" T="UserDTO">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserDTO">Phone Number</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        @*<MudTd DataLabel="Nr">@(rowIndex++)</MudTd>*@
        
        <MudTd DataLabel="Avatar">
            <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="@context.Avatar" />
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Nickname">@context.Nickname</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizes" />
    </PagerContent>
</MudTable>

@inject IUserService _userService
@inject NavigationManager Navigation

@code {
    private int rowIndex = 1;
    private List<UserDTO> Users  = new();
    private int[] pageSizes = new int[] {1, 3, 10, 25};
    private MudTable<UserDTO> _table;
    private string searchString = string.Empty;
    private string queryParams = string.Empty;

    private int defaultPageIndex = 0;
    private int defaultPageSize = 10;
    private string defaultSortColumn = "FirstName";
    private string defaultSortOrder = "asc";

    private bool firstRenderTrigger = false;
    private TableState _queryTableState = new TableState();


    private SearchParameters searchParameters = new SearchParameters();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InitQueryParams();
            _queryTableState.SortLabel = searchParameters.SortColumn;
            _queryTableState.Page = searchParameters.PageIndex;
            _queryTableState.PageSize = searchParameters.PageSize;
            if (string.Equals(searchParameters.SortOrder, "asc"))
            {
                _queryTableState.SortDirection = SortDirection.Ascending;
            }
            else
            {
                _queryTableState.SortDirection = SortDirection.Descending;
            }
            firstRenderTrigger = true;
        }


    }


    private async Task<TableData<UserDTO>> ServerReload(TableState state)
    {
        if (firstRenderTrigger)
        {
            SetTableState(_queryTableState);
        }
        else
        {
            if (state.SortLabel == null)
            {
                state.SortLabel = _queryTableState.SortLabel;
            }
            if (state.SortDirection == SortDirection.None)
            {
                state.SortDirection = _queryTableState.SortDirection;
            }
            SetTableState(state);
        }

        var queryStr = GetQueryStr(searchParameters);
        var data = await _userService.GetAllUsersWithSortAsync(queryStr);
        Navigate(queryStr);
        var table = new TableData<UserDTO> { TotalItems = data.TotalCount, Items = data.Data };
        firstRenderTrigger = false;
        return table;
    }


    private void SetTableState(TableState tableState)
    {
        searchParameters.PageSize = tableState.PageSize;
        searchParameters.PageIndex = tableState.Page;
        searchParameters.SortColumn = tableState.SortLabel;
        searchParameters.SortOrder = tableState.SortDirection == SortDirection.Descending ? "desc" : "asc";
    }



    private void OnSearch(string text)
    {
        searchParameters.FilterQuery = text;
        _table.ReloadServerData();
    }



    private void Navigate(string query)
    {
        Navigation.NavigateTo(Navigation.BaseUri + "users" + query);
    }



    private void InitQueryParams()
    {
        searchParameters.PageIndex = Navigation.ExtractQueryValueOrSetDefault<int>("pageIndex", defaultPageIndex);
        searchParameters.PageSize = Navigation.ExtractQueryValueOrSetDefault<int>("pageSize", defaultPageSize);
        searchParameters.SortColumn = Navigation.ExtractQueryValueOrSetDefault<string>("sortColumn", defaultSortColumn);
        searchParameters.SortOrder = Navigation.ExtractQueryValueOrSetDefault<string>("sortOrder", defaultSortOrder);
        searchParameters.FilterQuery = Navigation.ExtractQueryValueOrSetDefault<string>("filterQuery");
                
        _table.CurrentPage = searchParameters.PageIndex;
        _table.SortLabel = searchParameters.SortColumn;
        _table.SetRowsPerPage(searchParameters.PageSize);
        StateHasChanged();
        //searchParameters.FilterQuery = query["filterQuery"];

    }

    private string GetQueryStr(SearchParameters searchParameters)
    {
        var queryStringParam = new Dictionary<string, string?>
        {
            ["PageIndex"] = searchParameters.PageIndex.ToString(),
            ["PageSize"] = searchParameters.PageSize.ToString(),
            ["SortColumn"] = searchParameters.SortColumn,
            ["SortOrder"] = searchParameters.SortOrder,
            ["FilterQuery"] = searchParameters.FilterQuery ?? ""
        };

        var queryParams = QueryHelpers.AddQueryString("", queryStringParam);
        return queryParams;
    }


    


}
