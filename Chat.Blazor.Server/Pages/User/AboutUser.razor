@page "/user/about/{userId}"
@attribute [Authorize]

@using Chat.Blazor.Server.Helpers.Realization;
@using Chat.Blazor.Server.Helpers.StateContainers;
@using Chat.Blazor.Server.Models;
@using Chat.Blazor.Server.Services.Interfaces;
@using Chat.Blazor.Server.Models.DTO;


<h3>User Information:</h3>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<EditForm Model="@_selectedUser" OnValidSubmit="@SubmitForm">
    <FluentValidationValidator />
    <ValidationSummary />
    <fieldset disabled="@isReadOnly">

        <MudTextField T="string" ReadOnly=true Label="Id" Value="@_selectedUser.Id" />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText Id="firstname" class="form-control" @bind-Value="_selectedUser.FirstName" />
            <ValidationMessage For="@(() => _selectedUser.FirstName)" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText Id="lastname" class="form-control" @bind-Value="_selectedUser.LastName" />
            <ValidationMessage For="@(() => _selectedUser.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Email address</label>
            <InputText Id="email" class="form-control" @bind-Value="_selectedUser.Email" />
            <ValidationMessage For="@(() => _selectedUser.Email)" />
        </div>
        <div class="form-group">
            <label for="nickname">Nickname</label>
            <InputText Id="nickname" class="form-control" @bind-Value="_selectedUser.Nickname" />
            <ValidationMessage For="@(() => _selectedUser.Nickname)" />
        </div>
        <div class="form-group">
            <label for="username">Username</label>
            <InputText Id="username" class="form-control" @bind-Value="_selectedUser.UserName" />
            <ValidationMessage For="@(() => _selectedUser.UserName)" />
        </div>
        <div class="form-group">
            <label for="phonenumber">Phone Number</label>
            <InputText Id="phonenumber" class="form-control" @bind-Value="_selectedUser.PhoneNumber" />
            <ValidationMessage For="@(() => _selectedUser.PhoneNumber)" />
        </div>
        <div class="form-group">
        <MudAvatar Style="height:250px; width:250px;"><MudImage Src="@_selectedUser.Avatar"></MudImage></MudAvatar>
        </div>
    </fieldset>
    
    
   
   

    @if (!isReadOnly)
    {
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadImage">
            <ButtonTemplate Context="imageContext">
                <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@imageContext">
                    Choose avatar
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        

        <MudButton Variant="Variant.Filled"
               Color="Color.Primary" Class="ml-auto m-2"
               ButtonType=ButtonType.Submit Disabled="@(!context.Validate() || !context.IsModified())">Update Account</MudButton>
    }

    
</EditForm>


@inject IUserService _userService
@inject IImageService _imageService
@inject UserStateContainer _userStateContainer
@inject AvatarStateContainer _avatarStateContainer
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager Navigation

@code {
    [Parameter]
    public string? UserId { get; set; }

    private UserDTO _selectedUser = new();
    private bool isReadOnly = true;
    private bool ShowErrors;
    private string Error = "";
    private UserMenu UserMenu = new();



    protected override async void OnInitialized()
    {

        base.OnInitialized();
        await GetUserFromQueryOrContainer();
        await IsOwnerOfData(_selectedUser.Email);


        StateHasChanged();
    }


    private async Task GetUserFromQueryOrContainer()
    {
        if (_userStateContainer.Value == null)
        {
            _selectedUser = await _userService.GetUserByIdAsync(UserId);
        }
        else
        {
            _selectedUser = _userStateContainer.Value;
        }
        _userStateContainer.Value = null;
    }

    private async Task SubmitForm()
    {
        ShowErrors = false;

        var result = await _userService.UpdateUserAsync(_selectedUser);

        if (result.Success)
        {
            //await UserMenu.UpdateUserInfo();
            StateHasChanged();
            _avatarStateContainer.ChangeAvatar(_selectedUser.Avatar); 
            Navigation.NavigateTo("/users");
        }
        else
        {
            Error = result.Errors.First();
            ShowErrors = true;
        }
    }

    private async Task IsOwnerOfData(string userEmail)
    {
        var userState = await _authStateProvider.GetAuthenticationStateAsync();

        if (string.Equals(userEmail, userState.User.Identity.Name))
        {
            isReadOnly = false;
        }
    }

    
    private string ImageUrl = "";
    private async Task UploadImage(IBrowserFile file)
    {
        _selectedUser.Avatar = await _imageService.SaveImageInBase64(file);
        StateHasChanged();
    }



    public void Dispose()
    {
        _userStateContainer.OnStateChange -= StateHasChanged;
    }
}
