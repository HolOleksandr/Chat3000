@page "/ChangePassword"
@using Chat.Blazor.Server.Models;
@using Chat.Blazor.Server.Services.Interfaces;
@using Chat.Blazor.Server.Models.Requests;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<h1>Change your password </h1>

@if (ShowEmailError)
{
    <div class="alert-danger">
        <h2>Enter your email, please </h2>
    </div>
}

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors!)
        {
            <p>@error</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="changePassModel" OnValidSubmit="ChangePass">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="changePassModel.Email" />
                <ValidationMessage For="@(() => changePassModel.Email)" />
            </div>
            <div class="form-group">
                <label for="old-password">Password</label>
                <InputText Id="old-password" type="password" Class="form-control" @bind-Value="changePassModel.OldPassword" />
                <ValidationMessage For="@(() => changePassModel.OldPassword)" />
            </div>
            <div class="form-group">
                <label for="new-password">New Password</label>
                <InputText Id="new-password" type="password" Class="form-control" @bind-Value="changePassModel.NewPassword" />
                <ValidationMessage For="@(() => changePassModel.NewPassword)" />
            </div>
            <div class="form-group">
                <label for="new-password-confirm">Confirm Password</label>
                <InputText Id="new-password-confirm" type="password" class="form-control" @bind-Value="changePassModel.NewPasswordConfirm" />
                <ValidationMessage For="@(() => changePassModel.NewPasswordConfirm)" />
            </div>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto m-2"
                       ButtonType=ButtonType.Submit
                       >Update</MudButton>
        </EditForm>
    </div>
</div>


@inject AuthenticationStateProvider _authStateProvider
@code {

    private ChangePasswordModel changePassModel = new ChangePasswordModel();
    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    private string currentUserEmail;
    private bool ShowEmailError = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserEmail();
    }

    private async Task ChangePass()
    {
        ShowErrors = false;
        if(currentUserEmail != changePassModel.Email)
        {
            ShowEmailError = true;
            return;
        }

        ShowEmailError = false;
        var result = await AuthService.ChangePassword(changePassModel);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }

    private async Task GetCurrentUserEmail()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        currentUserEmail = _userState.User.Identity.Name;
    }
}
