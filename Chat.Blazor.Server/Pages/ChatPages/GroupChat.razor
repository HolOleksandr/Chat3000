@page "/chats/{groupId}"
@attribute [Authorize]

@using Chat.Blazor.Server.Helpers.StateContainers;
@using Chat.Blazor.Server.Models.DTO;
@using Chat.Blazor.Server.Models.Requests;
@using Chat.Blazor.Server.Services.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Security.Claims;
@using Chat.Blazor.Server.Helpers.Interfaces;

<div class=" container d-flex justify-content-center align-items-center">
    
    <div class="d-flex flex-grow-1 flex-row" style=" width:70vw">
        <MudPaper Elevation="25" Class="py-4 flex-grow-1" style="width: 60%">
            <MudToolBar Dense="true">
                @if (string.IsNullOrEmpty(_selectedGroup.Id.ToString()))
                {
                    <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                    <MudText Typo="Typo.h6">chat</MudText>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                    <MudText Typo="Typo.h6">@_selectedGroup.Name</MudText>
                }
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
                @foreach (var message in messages)
                {
                    <div class="d-flex flex-row my-4 @((message.Sender.Id == CurrentUserId) ? "flex-row-reverse" :"")">
                        <div class="mr-4">
                            @if (string.IsNullOrEmpty(@message.Sender.Avatar))
                            {
                                <div>
                                    <MudAvatar Style="height:50px; width:50px;"><MudImage Src="/Images/defaultavatar.jpg"></MudImage></MudAvatar>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <MudAvatar Style="height:50px; width:50px;"><MudImage Src="@message.Sender.Avatar"></MudImage></MudAvatar>
                                </div>
                            }
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.Sender.FirstName @message.Sender.LastName</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.SendDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>

                            @if (message.Sender.Id == CurrentUserId)
                            {
                                <MudText Typo="Typo.body2" Style=" padding: 15px;border-radius: 5px;margin-top:5px; background-color: var(--mud-palette-info);">
                                    @message.Text
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Style=" padding: 15px;border-radius: 5px;margin-top:5px; background-color: var(--mud-palette-background-grey);">
                                    @message.Text
                                </MudText>
                            }

                        </div>
                    </div>
                }
            </div>
            <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
                <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                              @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
                <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.Send" @onclick="SendMessage">
                    Send
                </MudButton>

            </MudPaper>
        </MudPaper>
        <div class="d-flex flex-column m-xl-1 max-height:65vh;min-height:65vh">
            <MudPaper Elevation="25" Class="px-3 ml-3 mb-3 flex-grow-1" MinWidth="350px" style="height: 15%">
                <MudToolBar Dense="true">
                    <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#1</MudText>
                    <MudText Typo="Typo.h6">Description</MudText>
                </MudToolBar>
                <div class="d-flex flex-column px-4" style=" overflow:scroll;">
                    <MudText> @_selectedGroup.Description</MudText>
                </div>
            </MudPaper>
            <MudPaper Elevation="25" Class="px-3 ml-3 mb-6 flex-grow-1" style="height: 60%">
                <MudToolBar Dense="true">
                    <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#2</MudText>
                    <MudText Typo="Typo.h6">Text</MudText>
                </MudToolBar>
                <MudTextField T="string" Label="@textLabel" Variant="Variant.Outlined" Text="@convertedText" Lines="10" />
            </MudPaper>
            <MudPaper Elevation="25" Class="px-3 ml-3 flex-grow-1" style="height: 25%">
                <MudStack Style="width: 100%" Spacing="0">
                    <MudFileUpload T="IBrowserFile" Accept=".doc, .docx" OnFilesChanged="OnInputFileChanged" MaximumFileCount="1" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                        <ButtonTemplate>
                            <MudPaper Outlined="true" Class="@DragClass">
                                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>

                                @if (!string.IsNullOrEmpty(fileName))
                                {
                                    <MudChip Color="Color.Dark" Text="@fileName" />
                                }
                            </MudPaper>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudToolBar DisableGutters="true" Class="gap-3 d-flex justify-content-center align-items-center">
                        <MudButton OnClick="Upload" Disabled="@(string.IsNullOrEmpty(fileName))" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
                        <MudButton OnClick="Clear" Disabled="@(string.IsNullOrEmpty(fileName))" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                    </MudToolBar>
                </MudStack>
            </MudPaper>
        </div>
    </div>
</div>

@inject NavigationManager Navigation 
@inject GroupInfoStateContainer _groupStateContainer
@inject IGroupService _groupService
@inject IUserService _userService
@inject IFIleService _fileService
@inject IChatMessageService _messageService
@inject AuthenticationStateProvider _authStateProvider
@inject IHubConnectionService _hubConnectionService
@inject ISnackbar Snackbar

@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private string? fileName = null;
    private string? textLabel = null;
    string? convertedText = null;
    private IBrowserFile? _textFile;
    private List<IDisposable> _hubSubscriptions = new();
    [Parameter] public string GroupId { get; set; }
    private HubConnection hubConnection { get; set; }
    private List<MessageDTO> messages = new List<MessageDTO>();
    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private UserDTO CurrentUser { get; set; }
    private GroupInfoViewDTO _selectedGroup = new();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await GetGroupFromQueryOrContainer();
        hubConnection = await _hubConnectionService.ConnectToChatHub(GroupId);
        await GetUserClaims();

        _hubSubscriptions.Add
            (
                hubConnection.On<MessageDTO>("ReceiveMessage", async (message) =>
               {
                   messages.Add(message);
                   await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
                   await InvokeAsync(StateHasChanged);
               })
            );
        
        await LoadGroupChat(_selectedGroup.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    private async Task LoadGroupChat(int groupId)
    {
        messages = (await _messageService.GetAllMessagesInGroupAsync(groupId)).ToList();
        StateHasChanged();
    }

    private ElementReference  sendButton;
    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await _jsRuntime.InvokeVoidAsync("blazorHelpers.simulateClick", sendButton);
            CurrentMessage = string.Empty;
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(CurrentMessage) 
            && !string.IsNullOrEmpty(CurrentUserId) 
            && !string.IsNullOrEmpty(_selectedGroup.Name))
        {
            var newMessage = new MessageDTO()
                {
                    SenderId = CurrentUserId,
                    GroupId = _selectedGroup.Id,
                    Text = CurrentMessage,
                    SendDate = DateTime.Now,
                    Sender = CurrentUser
                };

            await _messageService.SendMessageAsync(newMessage);

            await hubConnection.SendAsync("SendMessageToGroupAsync", newMessage, _selectedGroup.Id.ToString());
            CurrentMessage = string.Empty;
        };
    }

    private async Task GetGroupFromQueryOrContainer()
    {
        if (_groupStateContainer.Value == null && int.TryParse(GroupId, out int groupIdInt))
        {
            _selectedGroup = await _groupService.GetGroupByIdAsync(groupIdInt);
        }
        else
        {
            _selectedGroup = _groupStateContainer.Value;
        }
        _groupStateContainer.Value = null;
    }

    private async Task GetUserClaims()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        CurrentUserEmail = _userState.User.Identity.Name;
        CurrentUserId = _userState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value;

        CurrentUser = await _userService.GetUserByIdAsync(CurrentUserId);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        _textFile = e.GetMultipleFiles().First();
        fileName = _textFile.Name;
    }

    private async void Upload()
    {
        var request = new FileUploadRequest() { File = _textFile, UserDTO = CurrentUser };
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        await Clear();
        Snackbar.Add($"Converting your file{_textFile.Name}", Severity.Normal);
        var result = await _fileService.ConvertTextFileAsync(request);
        Snackbar.Add($"Conversion completed ", Severity.Normal);
        if (result.Success && result.Text != null)
        {
            convertedText = result.Text;
            textLabel = _textFile.Name;
        }
        else
        {
            convertedText = "Error: OOOPSSS, something happened";
            textLabel = "ERROR";
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task Clear()
    {
        fileName = null;
        ClearDragClass();
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    @implements IDisposable
    public void Dispose()
    {
        _hubSubscriptions.ForEach(x => x.Dispose());
    }
}
