@page "/calls/video/"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@using Chat.Blazor.Server.Helpers.StateContainers;
@using System.Security.Claims;
@using Chat.Blazor.Server.Helpers.Interfaces;

<h3>VideoCalls</h3>




<MudTextField Class="w-10; m-3" Disabled="OnCall" @bind-Value="receiverEmail" Label="Enter user Email" Variant="Variant.Text"></MudTextField>

@if (false)
{
    <MudTextField Class="w-10; m-3"  @bind-Value="peerId" Label="PeerId" Variant="Variant.Text"></MudTextField>
    
}


<MudButton Disabled="OnCall" @onclick="StartCall" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Call" Color="Color.Primary">Call</MudButton>
<MudButton Disabled="!OnCall" @onclick="StopCall" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.CallEnd" Color="Color.Secondary">Hang Up</MudButton>

<div>Local Video</div>
<div style="height:400px; width:600px; background-color:black; position:relative;">
    <video id="localVideo" autoplay playsinline
           style=" position:absolute; top:50%;  height:400px; width:600px;  transform: translateY(-50%);">
    </video>
</div>

<div>Remote Video</div>


<div style="height:400px; width:600px; background-color:black; position:relative;">
    <video id="remoteVideo" autoplay playsinline
           style=" position:absolute; top:50%;  height:400px; width:600px;  transform: translateY(-50%);">
    </video>

</div>


@inject NavigationManager Navigation
@inject PeerIdStateContainer _peerIdStateContainer
@inject AuthenticationStateProvider _authStateProvider
@inject IConfiguration Configuration;
@inject IHubConnectionService _hubConnectionService


@code {
    private bool firstRenderComplete;
    private string? PeerIdStr { get; set; }
    private bool OnCall = false;
    [CascadingParameter] public HubConnection hubConnection { get; set; }
    private ElementReference localVideo;
    private ElementReference remoteVideo;
    private string receiverEmail;
    private string peerId;
    private IJSObjectReference _peerModule;
    [Parameter] public string CurrentUserEmail { get; set; }
    [Parameter] public string CurrentUserId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        _peerModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/peerjs-service.js");
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);  
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("p", out var initCount))  
        {
            AnswerCall(initCount.ToString());
        }  

        await GetUserClaims();
        hubConnection = await _hubConnectionService.ConnectToHub();

        SubscribeForHungUpCalls();
        _peerIdStateContainer.OnPeerIdChange += AnswerCall; // IMPRTNT: subscribing on incoming call
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartCall()
    {
        _peerModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/peerjs-service.js");
        //await hubConnection.SendAsync("JoinGroup", CurrentUserEmail);
        peerId = await _peerModule.InvokeAsync<string>("createPeer");
        //_peerIdStateContainer.OnPeerIdChange -= AnswerCall;  // IMPRTNT: for usubscribing of ourself call
        await hubConnection.SendAsync("SendCallMessage", CurrentUserEmail, receiverEmail, peerId);
        Navigation.NavigateTo($"{Navigation.BaseUri}calls/video?p={peerId}");
        OnCall = true;
        
    }

    private async void StopCall()
    {
        await hubConnection.SendAsync("HangUp", receiverEmail);
        await _peerModule.InvokeVoidAsync("destroyPeer", peerId);
        Navigation.NavigateTo($"{Navigation.BaseUri}calls/video");
        OnCall = false;
    }

    private async void AnswerCall(string peerId)
    {
        await GetUserClaims();
        hubConnection = await _hubConnectionService.ConnectToHub();
        //await hubConnection.SendAsync("JoinGroup", CurrentUserEmail);
        var id = await _peerModule.InvokeAsync<string>("createPeer");
        var stream = await _peerModule.InvokeAsync<IJSObjectReference>("startLocalStream");
        await _peerModule.InvokeVoidAsync("setLocalStream", stream);
        await _peerModule.InvokeVoidAsync("callPeer", peerId);
        OnCall = true;
        await InvokeAsync(StateHasChanged);
    }

    private void SubscribeForHungUpCalls()
    {
        hubConnection.On("CallFinished", async() =>
        {
            await _peerModule.InvokeVoidAsync("destroyPeer", peerId);
        Navigation.NavigateTo($"{Navigation.BaseUri}calls/video");
            OnCall = false;
        } );
    }

    private async Task GetUserClaims()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        CurrentUserEmail = _userState.User.Identity.Name;
        CurrentUserId = _userState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value;

    }

    public void Dispose()
    {
        if(firstRenderComplete)
        {
            //_peerModule.Dispose();
        }
                //_peerIdStateContainer.OnPeerIdChange -= AnswerCall;
    }
}
