@page "/calls/video/"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@using Chat.Blazor.Server.Helpers.StateContainers;
@using System.Security.Claims;

<h3>VideoCalls</h3>




<MudTextField Class="w-10; m-3" @bind-Value="receiverEmail" Label="Enter user Email" Variant="Variant.Text"></MudTextField>

<MudTextField Class="w-10; m-3" @bind-Value="peerId" Label="PeerId" Variant="Variant.Text"></MudTextField>


<MudButton @onclick="StartCall" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Call" Color="Color.Primary">Call</MudButton>

<div>Local Video</div>
<div style="height:400px; width:600px; background-color:black; position:relative;">
    <video id="localVideo" autoplay playsinline
           style=" position:absolute; top:50%;  height:400px; width:600px;  transform: translateY(-50%);">
    </video>
</div>




<div>Remote Video</div>
<div style="height:400px; width:600px; background-color:black; position:relative;">
    <video id="remoteVideo" autoplay playsinline
           style=" position:absolute; top:50%;  height:400px; width:600px;  transform: translateY(-50%);">
    </video>

</div>


@inject NavigationManager Navigation
@inject PeerIdStateContainer _peerIdStateContainer
@inject AuthenticationStateProvider _authStateProvider


@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }
    private ElementReference localVideo;
    private ElementReference remoteVideo;
    private string receiverEmail;
    private string peerId;
    private IJSObjectReference _peerModule;
    [Parameter] public string CurrentUserEmail { get; set; }
    [Parameter] public string CurrentUserId { get; set; }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _peerModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/peerjs-service.js");
            peerId = await _peerModule.InvokeAsync<string>("createPeer");
            await GetUserClaims();
            //await InvokeAsync(StateHasChanged);
            await CheckHubConnection();
            _peerIdStateContainer.OnPeerIdChange += AnswerCall;
        }
        base.OnAfterRender(firstRender);
    }

    private async Task StartCall()
    {
        
        await hubConnection.SendAsync("SendCallMessage", CurrentUserEmail, receiverEmail, peerId);
        
        _peerIdStateContainer.OnPeerIdChange -= AnswerCall;
    }

    private async void AnswerCall(string peerId)
    {
        await CheckHubConnection();
        var _peerModule2 = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/peerjs-service.js");
        

        var stream = await _peerModule2.InvokeAsync<IJSObjectReference>("startLocalStream");
        
        await _peerModule2.InvokeVoidAsync("setLocalStream", stream);


        await _peerModule2.InvokeVoidAsync("callPeer", peerId);
        //await InvokeAsync(StateHasChanged);
    }





    private async Task CheckHubConnection()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/chatHub")).Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }

    private async Task GetUserClaims()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        CurrentUserEmail = _userState.User.Identity.Name;
        CurrentUserId = _userState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value;

    }



    public void Dispose()
    {
        
            _peerIdStateContainer.OnPeerIdChange -= AnswerCall;
            
       

        
    }
}
