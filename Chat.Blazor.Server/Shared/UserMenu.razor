@using Chat.Blazor.Server.Models.DTO;
@using MudBlazor
@using Chat.Blazor.Server.Helpers.StateContainers;
@using System.Security.Claims;
@using Chat.Blazor.Server.Services.Interfaces;



<div>
    <MudMenu>
        <ActivatorContent>
            <MudAvatar><MudImage Src="@CurrentUser.Avatar"></MudImage></MudAvatar>
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="GetProfile">Profile</MudMenuItem>
            <MudMenuItem OnClick="ChangePass">Change Password</MudMenuItem>
            <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
        </ChildContent>
           
    </MudMenu>
</div>
            

@inject AvatarStateContainer _avatarStateContainer
@inject NavigationManager NavManager
@inject UserStateContainer _userStateContainer
@inject AuthenticationStateProvider _authStateProvider
@inject IUserService _userService

@code {
    private UserDTO CurrentUser = new();
    protected override async Task OnInitializedAsync()
    {
        await UpdateUserInfo();
        base.OnInitialized();
        _avatarStateContainer.OnAvatarChange += AvatarHandler;

    }

    private async Task GetProfile()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        var userId = _userState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value;

        NavManager.NavigateTo($"/user/about/{userId}");
    }

    private void ChangePass()
    {
        NavManager.NavigateTo("/ChangePassword");
    }
    private void SignOut()
    {
        NavManager.NavigateTo("/LogOut");
    }

    private void AvatarHandler(string message)
    {
        CurrentUser.Avatar = message;
        StateHasChanged();
    }

    public async Task UpdateUserInfo()
    {
        var _userState = await _authStateProvider.GetAuthenticationStateAsync();
        
        var id = _userState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value;

        this.CurrentUser = await _userService.GetUserByIdAsync(id);
    }
    


    public void Dispose()
    {
        _avatarStateContainer.OnAvatarChange -= AvatarHandler;
    }

   
}

